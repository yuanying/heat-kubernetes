heat_template_version: 2013-05-23

description: >
  This template will boot a Kubernetes cluster with one or more
  minions (as specified by the number_of_minions parameter, which
  defaults to "2").

parameters:

  #
  # REQUIRED PARAMETERS
  #
  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server

  external_network_id:
    type: string
    description: uuid of a network to use for floating ip addresses

  fixed_network:
    type: string
    description: name of private network into which servers get deployed

  #
  # OPTIONAL PARAMETERS
  #
  server_image:
    type: string
    default: centos-atomic
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: baremetal
    description: flavor to use when booting the server

  number_of_minions:
    type: string
    description: how many kubernetes minions to spawn
    default: 1

  portal_network_cidr:
    type: string
    description: >
      address range used by kubernetes for service portals
    default: "10.254.0.0/16"

  flannel_network_cidr:
    type: string
    description: network range for flannel overlay network
    default: "10.100.0.0/16"

  flannel_network_subnetlen:
    type: string
    description: size of subnet assigned to each minion
    default: 24

  flannel_use_vxlan:
    type: string
    description: >
      if true use the vxlan backend, otherwise use the default
      udp backend
    default: "false"
    constraints:
      - allowed_values: ["true", "false"]

  kube_allow_priv:
    type: string
    description: >
      whether or not kubernetes should permit privileged containers.
    default: "true"
    constraints:
      - allowed_values: ["true", "false"]

resources:

  ######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.
  #

  disable_selinux:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: script
      config: {get_file: fragments/disable-selinux.sh}

  disable_selinux_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: disable_selinux
      server:
        get_resource: kube_master

  write_heat_params:
    type: "OS::Heat::SoftwareConfig"
    depends_on: disable_selinux_deployment
    properties:
      group: script
      config:
        str_replace:
          template: {get_file: fragments/write-heat-params-master.sh}
          params:
            "$MINION_ADDRESSES": {"Fn::Join": [",", {get_attr: [kube_minions, kube_node_ip]}]}
            "$KUBE_ALLOW_PRIV": {get_param: kube_allow_priv}
            # "$WAIT_HANDLE": {get_resource: master_wait_handle}
            "$FLANNEL_NETWORK_CIDR": {get_param: flannel_network_cidr}
            "$FLANNEL_NETWORK_SUBNETLEN": {get_param: flannel_network_subnetlen}
            "$FLANNEL_USE_VXLAN": {get_param: flannel_use_vxlan}
            "$PORTAL_NETWORK_CIDR": {get_param: portal_network_cidr}

  write_heat_params_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: write_heat_params
      server:
        get_resource: kube_master

  configure_kubernetes:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: script
      config: {get_file: fragments/configure-kubernetes-master.sh}

  configure_kubernetes_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: write_heat_params_deployment
    properties:
      config:
        get_resource: configure_kubernetes
      server:
        get_resource: kube_master

  enable_etcd:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: script
      config: {get_file: fragments/enable-etcd.sh}

  enable_etcd_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: configure_kubernetes_deployment
    properties:
      config:
        get_resource: enable_etcd
      server:
        get_resource: kube_master

  configure_flannel:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: script
      config: {get_file: fragments/configure-flannel.sh}

  configure_flannel_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: enable_etcd_deployment
    properties:
      config:
        get_resource: configure_flannel
      server:
        get_resource: kube_master

  enable_services:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: script
      config: {get_file: fragments/enable-services-master.sh}

  enable_services_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: configure_flannel_deployment
    properties:
      config:
        get_resource: enable_services
      server:
        get_resource: kube_master

  kube_master_floating:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network_id:
        get_param: external_network_id
      port_id:
        get_attr: [kube_master, addresses, {get_param: fixed_network}, 0, port]

  kube_master:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      networks:
        - network: {get_param: fixed_network}
      user_data_format: SOFTWARE_CONFIG

  kube_minions:
    type: "OS::Heat::ResourceGroup"
    depends_on: kube_master
    properties:
      count: {get_param: number_of_minions}
      resource_def:
        type: kubenode.yaml
        properties:
          ssh_key_name: {get_param: ssh_key_name}
          server_image: {get_param: server_image}
          server_flavor: {get_param: server_flavor}
          fixed_network: {get_param: fixed_network}
          kube_master_ip: {get_attr: [kube_master, networks, {get_param: fixed_network}, 0]}
          external_network_id: {get_param: external_network_id}
          kube_allow_priv: {get_param: kube_allow_priv}

outputs:

  kube_master:
    value: {get_attr: [kube_master_floating, floating_ip_address]}

  kube_minions:
    value: {get_attr: [kube_minions, kube_node_ip]}

  kube_minions_external:
    value: {get_attr: [kube_minions, kube_node_external_ip]}